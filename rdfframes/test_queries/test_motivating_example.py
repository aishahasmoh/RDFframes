from rdfframes.knowledge_graph import KnowledgeGraph
from rdfframes.utils.constants import JoinType
from rdfframes.client.http_client import HttpClientDataFormat, HttpClient



graph = KnowledgeGraph(graph_name='dbpedia')

endpoint = 'http://10.161.202.101:8890/sparql/'
output_format = HttpClientDataFormat.PANDAS_DF

client = HttpClient(endpoint_url=endpoint, return_format=output_format)

movies = graph.feature_domain_range('dbpp:starring', domain_col_name='movie', range_col_name='actor').cache()

# 3008 Rows. -- 2455 msec. with filter ({'actor_country': ['regex(str(?actor_country), "USA")']})
#2 1270 Rows. -- 1140 msec.
american_actors = movies.expand('actor', [('dbpp:birthPlace', 'actor_country')]).filter(
    {'actor_country': ['=dbpr:United_States']})


# 399 Rows. -- 1571 msec. with filter({'movie_count': ['>=60']})
many_movies = movies.group_by(['actor'])\
    .count('movie', 'movie_count', unique=True).filter({'movie_count': ['>=60']})

# 1478 Rows. -- 1295 msec.
big_american_name = american_actors.join(many_movies,'actor',join_type=JoinType.InnerJoin)

# 2 Rows. -- 267 msec with .filter({'actor_count': ['>=50']}).cache()
# 30 Rows. -- 247 msec. with .filter({'actor_count': ['>=30']}).cache()
many_actors = movies.group_by(['movie'])\
    .count('actor', 'actor_count').filter({'actor_count': ['>=30']}).cache()

# 1083 Rows. -- 57 msec.
big_production = many_actors.expand('movie', [('dbpp:starring', 'actor')])


final_result = big_american_name.join(big_production,'actor', join_type=JoinType.OuterJoin)

print(final_result.to_sparql())


"""
2561 Rows. -- 1668 msec.

Query generated by RDFFrames
PREFIX  dbpp: <http://dbpedia.org/property/>
PREFIX  rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX  dbpo: <http://dbpedia.org/ontology/>
PREFIX  dbpr: <http://dbpedia.org/resource/>

SELECT  *
FROM <http://dbpedia.org>
WHERE
  { {   { SELECT  *
          WHERE
            { { SELECT  *
                WHERE
                  { ?movie  dbpp:starring    ?actor .
                    ?actor  dbpp:birthPlace  ?actor_country
                    FILTER ( ?actor_country = dbpr:United_States )
                    { SELECT DISTINCT  ?actor (COUNT(DISTINCT ?movie) AS ?movie_count)
                      WHERE
                        { ?movie  dbpp:starring  ?actor }
                      GROUP BY ?actor
                      HAVING ( COUNT(DISTINCT ?movie) >= 60 )
                    }
                  }
              }
              OPTIONAL
                { SELECT  *
                  WHERE
                    { ?movie  dbpp:starring  ?actor
                      { SELECT DISTINCT  ?movie (COUNT(?actor) AS ?actor_count)
                        WHERE
                          { ?movie  dbpp:starring  ?actor }
                        GROUP BY ?movie
                        HAVING ( COUNT(?actor) >= 30 )
                      }
                    }
                }
            }
        }
      UNION
        { SELECT  *
          WHERE
            { { SELECT  *
                WHERE
                  { ?movie  dbpp:starring  ?actor
                    { SELECT DISTINCT  ?movie (COUNT(?actor) AS ?actor_count)
                      WHERE
                        { ?movie  dbpp:starring  ?actor }
                      GROUP BY ?movie
                      HAVING ( COUNT(?actor) >= 30 )
                    }
                  }
              }
              OPTIONAL
                { SELECT  *
                  WHERE
                    { ?movie  dbpp:starring    ?actor .
                      ?actor  dbpp:birthPlace  ?actor_country
                      FILTER ( ?actor_country = dbpr:United_States )
                      { SELECT DISTINCT  ?actor (COUNT(DISTINCT ?movie) AS ?movie_count)
                        WHERE
                          { ?movie  dbpp:starring  ?actor }
                        GROUP BY ?actor
                        HAVING ( COUNT(DISTINCT ?movie) >= 60 )
                      }
                    }
                }
            }
        }
    }
  }
"""


"""

movies1 = graph.feature_domain_range('dbpp:starring', domain_col_name='movie1', range_col_name='actor1').cache()

american_actors = movies1.expand('actor1', [('dbpp:birthPlace', 'actor_country')]).filter(
    {'actor_country': ['regex(str(?actor_country), "USA")']})



many_movies = movies1.group_by(['actor1'])\
    .count('movie1', 'movie_count', unique=True).filter({'movie_count': ['>=60']})

big_american_name = american_actors.join(many_movies,'actor1',join_type=JoinType.InnerJoin)

movies2 = graph.feature_domain_range('dbpp:starring', domain_col_name='movie2', range_col_name='actor2').cache()

many_actors = movies2.group_by(['movie2'])\
    .count('actor2', 'actor_count').filter({'actor_count': ['>=50']}).cache()

big_production = many_actors.expand('movie2', [('dbpp:starring', 'actor2')])

final_result = big_american_name.join(big_production, join_col_name1= 'actor1', join_col_name2='actor2',  new_column_name='actor', join_type=JoinType.OuterJoin)

print(final_result.to_sparql())

"""


"""
RDFFRames SPARQL query
0 Rows. -- 1277 msec.

PREFIX  dbpp: <http://dbpedia.org/property/>
PREFIX  dcterms: <http://purl.org/dc/terms/>
PREFIX  rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX  dbpo: <http://dbpedia.org/ontology/>
PREFIX  dbpr: <http://dbpedia.org/resource/>

SELECT  *
FROM <http://dbpedia.org>
WHERE
  { {   { SELECT  *
          WHERE
            { { SELECT  *
                WHERE
                  { ?movie1  dbpp:starring    ?actor .
                    ?actor   dbpp:birthPlace  ?actor_country
                    FILTER regex(str(?actor_country), "USA")
                    { SELECT DISTINCT  ?actor (COUNT(DISTINCT ?movie1) AS ?movie_count)
                      WHERE
                        { ?movie1  dbpp:starring  ?actor }
                      GROUP BY ?actor
                      HAVING ( COUNT(DISTINCT ?movie1) >= 60 )
                    }
                  }
              }
              OPTIONAL
                { SELECT  *
                  WHERE
                    { ?movie2  dbpp:starring  ?actor
                      { SELECT DISTINCT  ?movie2 (COUNT(?actor) AS ?actor_count)
                        WHERE
                          { ?movie2  dbpp:starring  ?actor }
                        GROUP BY ?movie2
                        HAVING ( COUNT(?actor2) >= 50 )
                      }
                    }
                }
            }
        }
      UNION
        { SELECT  *
          WHERE
            { { SELECT  *
                WHERE
                  { ?movie2  dbpp:starring  ?actor
                    { SELECT DISTINCT  ?movie2 (COUNT(?actor) AS ?actor_count)
                      WHERE
                        { ?movie2  dbpp:starring  ?actor }
                      GROUP BY ?movie2
                      HAVING ( COUNT(?actor2) >= 50 )
                    }
                  }
              }
              OPTIONAL
                { SELECT  *
                  WHERE
                    { ?movie1  dbpp:starring    ?actor .
                      ?actor   dbpp:birthPlace  ?actor_country
                      FILTER regex(str(?actor_country), "USA")
                      { SELECT DISTINCT  ?actor (COUNT(DISTINCT ?movie1) AS ?movie_count)
                        WHERE
                          { ?movie1  dbpp:starring  ?actor }
                        GROUP BY ?actor
                        HAVING ( COUNT(DISTINCT ?movie1) >= 60 )
                      }
                    }
                }
            }
        }
    }
  }
"""